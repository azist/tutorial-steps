//Various paths used across applications.
//instead of hard-coding the paths all over the place, we declare all paths in one place here. This file then gets included in app config.
//Now we can reference paths like so:
//
//    path=$(/paths/$log)
//
// Explanation:
//  Whatever is between "$(" and ")" is treated as navigation path of the config root, so "/paths" navigates to
//  sub-section "paths" under root "/" section, then "$log" is an attribute (a variable called "log") under that section "paths"
//
paths
{
  home-path-default="./"

  //take root home path from machine-dependent config
  //notice coalescing syntax from left to right the paths delimited by ';' get evaluated
  //until such node is found AND its value is not blank ('#' instructs to check node value as well)
  home=$(#/machine/$home-path;$home-path-default)  //e.g. /home/sky

  //we will dump all local logs under "logs" subdirectory
  log-dir=logs

  //Concatenate as path:  home + logs + {app.name}
  //the '@' means "as path" to avoid unneeded slashes, e.g. "a/"+"/b" = "a/b" when '@' is used
  log=$($home)$(@$log-dir)$(@/$name) // e.g. /home/sky/logs/s02-cfglog

  //Where static web resources are (if any)
  www-dir=www
  www-static=$($home)$(@$www-dir)

  //Global Distributed Id data directory - where server writes sequence files
  gdid-dir=gdid
  gdid=$($home)$(@$gdid-dir) // e.g. /home/sky/gdid

  //Where data is stored and db executables are
  data-dir=data
  data-app-dir=$($data-dir)$(@/$id)
  data=$($home)$(@$data-dir)        // data dir where db executables are stored and app-specifics subdirs are e.g. /home/sky/data
  data-app=$($home)$(@$data-app-dir)// app-specific data dir where apps store their data files e.g. /home/sky/data/ap1
}
