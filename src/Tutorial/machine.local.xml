<!--
  Machine configuration file externalizes variables to be set by elevate(deploy) process (e.g. Octopus, Azure DevOps etc..).

  This file is in XML format as it may need to be parsed by publish tool (e.g. Appveyor, Octopus, Jenkins etc..)

  There may be more than one file with the same name sitting in the same directory, the difference is in the suffix which
  represents deployemnt target. Each application configuration mixes-in the appropriate machine file, named with the suffix
  at the end where the suffix is taken from  environment variable `AZ_MACHINE_CONFIG_SUFFIX` set on the target host.

  For example:

    [app-]machine.local.xml     -  file filled with actual values used for local development

    [app-]machine.dev.xml       -  file used in DEV, dev sometimes needs similar values as local
                                   (e.g. when DevOps elevate process is being developed and not yet available)

    [app-]machine.devops.xml    -  file used by elevate system (e.g. Octopus or Jenkins) during publishing into an environment,
                                   this file would contain variables which the system can set


  The build pipeline sets the variables in the relevant file (e.g. *.octopus.xml) to values matching target environment (e.g. DEV/UAT/PROD).
  This way the software is built and deployed uniformly to all environments
-->
<machine
  environment-name="dev"
  home-path="$(~SKY_HOME)"
  log-level-comp="Debug"
  log-level-data="None">

  <web errors-local-only="false" log-errors-local-only="false">
    <listen name="main">http://+:$(/services/$http-main-listen-port)/</listen>
  </web>


  <!--
    WARNING!!!
    The values under "security" section below in this file are HARD-CODED and used ONLY for illustration purposes!!!
    These values should never be used in any of your real systems, they should never be stored in
    public source control like GitHub etc.

    In real systems store the values in you secret store, e.g. secure Octopus deploy var interpolation syntax:
    <root-password>#{security-root-password}</root-password>
  -->
  <security  cfg-file-suffix="local">

    <root-password>  <!-- !!!EXAMPLE ONLY!!! Plain password:  b8ijU02KiqWEr7m0x0_14Zlqp5 -->
    {"alg":"KDF","fam":"Text","h":"X8EhnBtCIzc0lzvPoRIoVUsepXuz2gt-h8cDWZZKvGc","s":"lIi1rOXGYtcUFovPOuuO5rWwwVHFIh__ZhoAOpIzIQI"}
    </root-password>
    <test-client-password> <!-- !!!EXAMPLE ONLY!!!  Plain password:  thejake -->
    {"alg":"NOP","fam":"Text","h":"dGhlamFrZQ=="}
    </test-client-password>

    <cryptography>
      <!--
        You can generate keys by using 'phash' utility
          $ cd out/Debug/azos/run-core    # go to azos tooling directory (relative to project root)
          $ dotnet phash.dll -?           # get help/manual
          $ dotnet phash.dll -k 512 -ne   # generate 512 bit key, do not get extra entropy from operator
          $ dotnet phash.dll -k 256       # generate 256 bit key, get extra entropy from operator

        WARNING:
          Never use hard-coded crypto values in non-local/dev environment files.
          Store secrets in your deploy store (e.g. Octopus variables) and use var interpolation during
          environment deploy
       -->
      <aes1>
        <hmac512-0>base64:Wj-57q4gob9eDhSR8wi9AGsLyEoI_8d9B9gGZnqOb6wo-Efz0P_jjL9gfVZGrOyKtjZocz07hzOnthMSaSba5Q</hmac512-0>
        <hmac512-1>base64:7JjEGVmobBWuOmbPM02iTlQubI_jFx6iBh-165AYW5L-FR0dJf_7pREnIsux8DJOlsqJ5EFw14IlXZXLpx7Gfg</hmac512-1>
        <aes256-0>base64:zFdVSrHzy8xQvWIT39xH-OgSsZ4uIz2cPQ7sO4d6Xeo</aes256-0>
        <aes256-1>base64:uP-ymZuNaYvo6YTsi3XV32K_PA0pgtjpc3vsWbnHP6Y</aes256-1>
        <aes256-2>base64:b-8kmq7UwApkg5Hya5mhidN6dDGCOiSjgM325JkFdGY</aes256-2>
      </aes1>
      <jwt1>
        <hmac512>base64:Q90VgcBobBA5UXjUe-x2AB349qzabIQHT0D9vEl5egHynoFlNmDTnC4N4VmtiuTuO0kfs73RDxaCJyKPbo6-pQ</hmac512>
      </jwt1>
      <idpmsg>
        <hmac512-0>base64:TCh_K6Ih8DSCQjDiour9Kw46vUCNsRDhX8WlmrKIYvhAazp3H5s_CP4c_cYVtfPNp6hYSBG3xny3fDMOdMwozQ</hmac512-0>
        <aes256-0>base64:X-it7L9oTB-P2snTm5lyCL4UBttEt4hd0sfuJuPSgdE</aes256-0>
        <aes256-1>base64:_XoYyy0ZrPuQ0HERlafMrbk1-8xC8UFVkfpHvDWDY-8</aes256-1>
      </idpmsg>

      <!-- You only need systoken on ESGOV, it is included here for tutorial simplicity as SYSTOKEN keys MAY NOT be deployed on other hosts -->
      <idpsystoken>
        <hmac512-0>base64:TCh_K6Ih8DSCQjDiour9Kw46vUCNsRDhX8WlmrKIYvhAazp3H5s_CP4c_cYVtfPNp6hYSBG3xny3fDMOdMwozQ</hmac512-0>
        <aes256-0>base64:X-it7L9oTB-P2snTm5lyCL4UBttEt4hd0sfuJuPSgdE</aes256-0>
        <aes256-1>base64:_XoYyy0ZrPuQ0HERlafMrbk1-8xC8UFVkfpHvDWDY-8</aes256-1>
      </idpsystoken>

      <internal.oplog.beta>
        <hmac512-0>base64:lJPVehQN781JIpcmOum3fX2ZfEcGKOyrYZhDDLeGB1OQQxmU6T8oVf0Iv0q5xlk0hJu8gWlTblKyAQLD3PqViQ</hmac512-0>
        <aes256-0>base64:TYiy6X9MTMd3PBvRZiQ_Bkmil7VmNThx_M-ih19c4Rk</aes256-0>
      </internal.oplog.beta>

    </cryptography>
  </security>

  <services>
    <!-- Global Distributed ID authorities -->
    <gdida auth-scheme="Bearer" auth-value="garbage_bearer_token">
      <shard-0-first>http://serverClosest:9000/es</shard-0-first>
      <shard-0-second>http://serverNextClosest:9000/es</shard-0-second>
    </gdida>

    <!-- API Authentication IDP/OAuth -->
    <minidp auth-scheme="Bearer" auth-value="garbage_bearer_token">
      <shard-0-first>http://serverClosest:9000/minidp</shard-0-first>
      <shard-0-second>http://serverNextClosest:9000/minidp</shard-0-second>
    </minidp>

    <!-- APM Chronicles (log/telemetry) -->
    <chronicle auth-scheme="Bearer" auth-value="garbage_bearer_token">
      <shard-0-first>http://serverClosest:9010/chronicle</shard-0-first>  <!-- no trailing slash -->
      <shard-0-second>http://serverNextClosest:9010/chronicle</shard-0-second>  <!-- no trailing slash -->
    </chronicle>
  </services>

  <connect-strings>
    <context1 schema-name="dbo">
      <primary>connect_string</primary>
      <secondary>connect_string</secondary>
    </context1>
  </connect-strings>

  <gdid-authority ids="$(~SKY_GDID_AUTHORITY_IDS)">
  Use comma-separated list of hex values e.g.:  `1,3,7`  or `a,b,c,d,e,f`

  Attention!!!
  Gdid authorities generate globally-unique blocks of sequences used as keys thorough the system.
  The Authority IDs are used as discriminator in cloud systems - they should NEVER INTERSECT.
  Wrong setup in this section may lead to duplicate ID generation
  </gdid-authority>

</machine>
